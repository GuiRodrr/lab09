// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file_processor.proto

#include "file_processor.pb.h"
#include "file_processor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace file_processor {

static const char* FileProcessor_method_names[] = {
  "/file_processor.FileProcessor/CompressPDF",
  "/file_processor.FileProcessor/ConvertToTXT",
  "/file_processor.FileProcessor/ConvertImageFormat",
  "/file_processor.FileProcessor/ResizeImage",
};

std::unique_ptr< FileProcessor::Stub> FileProcessor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileProcessor::Stub> stub(new FileProcessor::Stub(channel, options));
  return stub;
}

FileProcessor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CompressPDF_(FileProcessor_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConvertToTXT_(FileProcessor_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ConvertImageFormat_(FileProcessor_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ResizeImage_(FileProcessor_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status FileProcessor::Stub::CompressPDF(::grpc::ClientContext* context, const ::file_processor::FileRequest& request, ::file_processor::FileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::file_processor::FileRequest, ::file_processor::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompressPDF_, context, request, response);
}

void FileProcessor::Stub::async::CompressPDF(::grpc::ClientContext* context, const ::file_processor::FileRequest* request, ::file_processor::FileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::file_processor::FileRequest, ::file_processor::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompressPDF_, context, request, response, std::move(f));
}

void FileProcessor::Stub::async::CompressPDF(::grpc::ClientContext* context, const ::file_processor::FileRequest* request, ::file_processor::FileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompressPDF_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file_processor::FileResponse>* FileProcessor::Stub::PrepareAsyncCompressPDFRaw(::grpc::ClientContext* context, const ::file_processor::FileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::file_processor::FileResponse, ::file_processor::FileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompressPDF_, context, request);
}

::grpc::ClientAsyncResponseReader< ::file_processor::FileResponse>* FileProcessor::Stub::AsyncCompressPDFRaw(::grpc::ClientContext* context, const ::file_processor::FileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompressPDFRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::ConvertToTXTRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), rpcmethod_ConvertToTXT_, context);
}

void FileProcessor::Stub::async::ConvertToTXT(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileChunk,::file_processor::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileChunk,::file_processor::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_ConvertToTXT_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::AsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ConvertToTXT_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::PrepareAsyncConvertToTXTRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ConvertToTXT_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::ConvertImageFormatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), rpcmethod_ConvertImageFormat_, context);
}

void FileProcessor::Stub::async::ConvertImageFormat(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileChunk,::file_processor::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileChunk,::file_processor::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_ConvertImageFormat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::AsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ConvertImageFormat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::PrepareAsyncConvertImageFormatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ConvertImageFormat_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::ResizeImageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), rpcmethod_ResizeImage_, context);
}

void FileProcessor::Stub::async::ResizeImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::file_processor::FileChunk,::file_processor::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::file_processor::FileChunk,::file_processor::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_ResizeImage_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::AsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ResizeImage_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* FileProcessor::Stub::PrepareAsyncResizeImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::file_processor::FileChunk, ::file_processor::FileChunk>::Create(channel_.get(), cq, rpcmethod_ResizeImage_, context, false, nullptr);
}

FileProcessor::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessor_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileProcessor::Service, ::file_processor::FileRequest, ::file_processor::FileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileProcessor::Service* service,
             ::grpc::ServerContext* ctx,
             const ::file_processor::FileRequest* req,
             ::file_processor::FileResponse* resp) {
               return service->CompressPDF(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessor_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessor::Service, ::file_processor::FileChunk, ::file_processor::FileChunk>(
          [](FileProcessor::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileChunk,
             ::file_processor::FileChunk>* stream) {
               return service->ConvertToTXT(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessor_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessor::Service, ::file_processor::FileChunk, ::file_processor::FileChunk>(
          [](FileProcessor::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileChunk,
             ::file_processor::FileChunk>* stream) {
               return service->ConvertImageFormat(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileProcessor_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FileProcessor::Service, ::file_processor::FileChunk, ::file_processor::FileChunk>(
          [](FileProcessor::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::file_processor::FileChunk,
             ::file_processor::FileChunk>* stream) {
               return service->ResizeImage(ctx, stream);
             }, this)));
}

FileProcessor::Service::~Service() {
}

::grpc::Status FileProcessor::Service::CompressPDF(::grpc::ServerContext* context, const ::file_processor::FileRequest* request, ::file_processor::FileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessor::Service::ConvertToTXT(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessor::Service::ConvertImageFormat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileProcessor::Service::ResizeImage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::file_processor::FileChunk, ::file_processor::FileChunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace file_processor

